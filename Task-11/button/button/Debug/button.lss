
button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000632  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000632  000006a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000e00  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007af  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000025e  00000000  00000000  0000166f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d6  00000000  00000000  000018cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e8  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000048e  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 02 	call	0x4b2	; 0x4b2 <main>
  8a:	0c 94 17 03 	jmp	0x62e	; 0x62e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_init>:
#include"DIO.h"
#include "std_macros.h"
#include <avr/io.h>
void button_init(char port,char pin)
{
	 DIO_setPINdir(port,pin,0);
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_setPINdir>
}
  9e:	08 95       	ret

000000a0 <button_read>:

char button_read(char port,char pin)
{
	return DIO_u8read(port,pin);
  a0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_u8read>
  a4:	08 95       	ret

000000a6 <DIO_setPINdir>:

#include "std_macros.h"
#include <avr/io.h>
void DIO_setPINdir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  a6:	84 34       	cpi	r24, 0x44	; 68
  a8:	09 f4       	brne	.+2      	; 0xac <DIO_setPINdir+0x6>
  aa:	71 c0       	rjmp	.+226    	; 0x18e <DIO_setPINdir+0xe8>
  ac:	85 34       	cpi	r24, 0x45	; 69
  ae:	48 f4       	brcc	.+18     	; 0xc2 <DIO_setPINdir+0x1c>
  b0:	82 34       	cpi	r24, 0x42	; 66
  b2:	99 f1       	breq	.+102    	; 0x11a <DIO_setPINdir+0x74>
  b4:	83 34       	cpi	r24, 0x43	; 67
  b6:	08 f0       	brcs	.+2      	; 0xba <DIO_setPINdir+0x14>
  b8:	4d c0       	rjmp	.+154    	; 0x154 <DIO_setPINdir+0xae>
  ba:	81 34       	cpi	r24, 0x41	; 65
  bc:	09 f0       	breq	.+2      	; 0xc0 <DIO_setPINdir+0x1a>
  be:	83 c0       	rjmp	.+262    	; 0x1c6 <DIO_setPINdir+0x120>
  c0:	0f c0       	rjmp	.+30     	; 0xe0 <DIO_setPINdir+0x3a>
  c2:	82 36       	cpi	r24, 0x62	; 98
  c4:	51 f1       	breq	.+84     	; 0x11a <DIO_setPINdir+0x74>
  c6:	83 36       	cpi	r24, 0x63	; 99
  c8:	20 f4       	brcc	.+8      	; 0xd2 <DIO_setPINdir+0x2c>
  ca:	81 36       	cpi	r24, 0x61	; 97
  cc:	09 f0       	breq	.+2      	; 0xd0 <DIO_setPINdir+0x2a>
  ce:	7b c0       	rjmp	.+246    	; 0x1c6 <DIO_setPINdir+0x120>
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <DIO_setPINdir+0x3a>
  d2:	83 36       	cpi	r24, 0x63	; 99
  d4:	09 f4       	brne	.+2      	; 0xd8 <DIO_setPINdir+0x32>
  d6:	3e c0       	rjmp	.+124    	; 0x154 <DIO_setPINdir+0xae>
  d8:	84 36       	cpi	r24, 0x64	; 100
  da:	09 f0       	breq	.+2      	; 0xde <DIO_setPINdir+0x38>
  dc:	74 c0       	rjmp	.+232    	; 0x1c6 <DIO_setPINdir+0x120>
  de:	57 c0       	rjmp	.+174    	; 0x18e <DIO_setPINdir+0xe8>
	{
		case 'A':
		case 'a':
		if (direction==1)
  e0:	41 30       	cpi	r20, 0x01	; 1
  e2:	69 f4       	brne	.+26     	; 0xfe <DIO_setPINdir+0x58>
		{
			SET_BIT(DDRA,pinnumber);
  e4:	4a b3       	in	r20, 0x1a	; 26
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	c9 01       	movw	r24, r18
  ec:	06 2e       	mov	r0, r22
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_setPINdir+0x4e>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_setPINdir+0x4a>
  f8:	84 2b       	or	r24, r20
  fa:	8a bb       	out	0x1a, r24	; 26
  fc:	10 c0       	rjmp	.+32     	; 0x11e <DIO_setPINdir+0x78>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);
  fe:	4a b3       	in	r20, 0x1a	; 26
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	c9 01       	movw	r24, r18
 106:	06 2e       	mov	r0, r22
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_setPINdir+0x68>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_setPINdir+0x64>
 112:	80 95       	com	r24
 114:	84 23       	and	r24, r20
 116:	8a bb       	out	0x1a, r24	; 26
 118:	0f c0       	rjmp	.+30     	; 0x138 <DIO_setPINdir+0x92>
		}
		case 'B':
		case 'b':
		if(direction==1)
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	69 f4       	brne	.+26     	; 0x138 <DIO_setPINdir+0x92>
		{
			SET_BIT(DDRB,pinnumber);
 11e:	27 b3       	in	r18, 0x17	; 23
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	ac 01       	movw	r20, r24
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_setPINdir+0x86>
 128:	44 0f       	add	r20, r20
 12a:	55 1f       	adc	r21, r21
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_setPINdir+0x82>
 130:	ba 01       	movw	r22, r20
 132:	62 2b       	or	r22, r18
 134:	67 bb       	out	0x17, r22	; 23
 136:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);
 138:	27 b3       	in	r18, 0x17	; 23
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	ac 01       	movw	r20, r24
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_setPINdir+0xa0>
 142:	44 0f       	add	r20, r20
 144:	55 1f       	adc	r21, r21
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_setPINdir+0x9c>
 14a:	ba 01       	movw	r22, r20
 14c:	60 95       	com	r22
 14e:	62 23       	and	r22, r18
 150:	67 bb       	out	0x17, r22	; 23
 152:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(direction==1)
 154:	41 30       	cpi	r20, 0x01	; 1
 156:	69 f4       	brne	.+26     	; 0x172 <DIO_setPINdir+0xcc>
		{
			SET_BIT(DDRC,pinnumber);
 158:	24 b3       	in	r18, 0x14	; 20
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	ac 01       	movw	r20, r24
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_setPINdir+0xc0>
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_setPINdir+0xbc>
 16a:	ba 01       	movw	r22, r20
 16c:	62 2b       	or	r22, r18
 16e:	64 bb       	out	0x14, r22	; 20
 170:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);
 172:	24 b3       	in	r18, 0x14	; 20
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_setPINdir+0xda>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_setPINdir+0xd6>
 184:	ba 01       	movw	r22, r20
 186:	60 95       	com	r22
 188:	62 23       	and	r22, r18
 18a:	64 bb       	out	0x14, r22	; 20
 18c:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(direction==1)
 18e:	41 30       	cpi	r20, 0x01	; 1
 190:	69 f4       	brne	.+26     	; 0x1ac <DIO_setPINdir+0x106>
		{
			SET_BIT(DDRD,pinnumber);
 192:	21 b3       	in	r18, 0x11	; 17
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	ac 01       	movw	r20, r24
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_setPINdir+0xfa>
 19c:	44 0f       	add	r20, r20
 19e:	55 1f       	adc	r21, r21
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_setPINdir+0xf6>
 1a4:	ba 01       	movw	r22, r20
 1a6:	62 2b       	or	r22, r18
 1a8:	61 bb       	out	0x11, r22	; 17
 1aa:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);
 1ac:	21 b3       	in	r18, 0x11	; 17
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	ac 01       	movw	r20, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_setPINdir+0x114>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_setPINdir+0x110>
 1be:	ba 01       	movw	r22, r20
 1c0:	60 95       	com	r22
 1c2:	62 23       	and	r22, r18
 1c4:	61 bb       	out	0x11, r22	; 17
 1c6:	08 95       	ret

000001c8 <DIO_write>:
	}
}

void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 1c8:	82 34       	cpi	r24, 0x42	; 66
 1ca:	51 f1       	breq	.+84     	; 0x220 <DIO_write+0x58>
 1cc:	83 34       	cpi	r24, 0x43	; 67
 1ce:	20 f4       	brcc	.+8      	; 0x1d8 <DIO_write+0x10>
 1d0:	81 34       	cpi	r24, 0x41	; 65
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <DIO_write+0xe>
 1d4:	7b c0       	rjmp	.+246    	; 0x2cc <DIO_write+0x104>
 1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <DIO_write+0x1e>
 1d8:	83 34       	cpi	r24, 0x43	; 67
 1da:	09 f4       	brne	.+2      	; 0x1de <DIO_write+0x16>
 1dc:	3e c0       	rjmp	.+124    	; 0x25a <DIO_write+0x92>
 1de:	84 34       	cpi	r24, 0x44	; 68
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <DIO_write+0x1c>
 1e2:	74 c0       	rjmp	.+232    	; 0x2cc <DIO_write+0x104>
 1e4:	57 c0       	rjmp	.+174    	; 0x294 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 1e6:	41 30       	cpi	r20, 0x01	; 1
 1e8:	69 f4       	brne	.+26     	; 0x204 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 1ea:	2b b3       	in	r18, 0x1b	; 27
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	ac 01       	movw	r20, r24
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_write+0x30>
 1f4:	44 0f       	add	r20, r20
 1f6:	55 1f       	adc	r21, r21
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_write+0x2c>
 1fc:	ba 01       	movw	r22, r20
 1fe:	62 2b       	or	r22, r18
 200:	6b bb       	out	0x1b, r22	; 27
 202:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 204:	2b b3       	in	r18, 0x1b	; 27
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	ac 01       	movw	r20, r24
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_write+0x4a>
 20e:	44 0f       	add	r20, r20
 210:	55 1f       	adc	r21, r21
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_write+0x46>
 216:	ba 01       	movw	r22, r20
 218:	60 95       	com	r22
 21a:	62 23       	and	r22, r18
 21c:	6b bb       	out	0x1b, r22	; 27
 21e:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	69 f4       	brne	.+26     	; 0x23e <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 224:	28 b3       	in	r18, 0x18	; 24
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	ac 01       	movw	r20, r24
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_write+0x6a>
 22e:	44 0f       	add	r20, r20
 230:	55 1f       	adc	r21, r21
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_write+0x66>
 236:	ba 01       	movw	r22, r20
 238:	62 2b       	or	r22, r18
 23a:	68 bb       	out	0x18, r22	; 24
 23c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 23e:	28 b3       	in	r18, 0x18	; 24
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	ac 01       	movw	r20, r24
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_write+0x84>
 248:	44 0f       	add	r20, r20
 24a:	55 1f       	adc	r21, r21
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_write+0x80>
 250:	ba 01       	movw	r22, r20
 252:	60 95       	com	r22
 254:	62 23       	and	r22, r18
 256:	68 bb       	out	0x18, r22	; 24
 258:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 25a:	41 30       	cpi	r20, 0x01	; 1
 25c:	69 f4       	brne	.+26     	; 0x278 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
 25e:	25 b3       	in	r18, 0x15	; 21
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	ac 01       	movw	r20, r24
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_write+0xa4>
 268:	44 0f       	add	r20, r20
 26a:	55 1f       	adc	r21, r21
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_write+0xa0>
 270:	ba 01       	movw	r22, r20
 272:	62 2b       	or	r22, r18
 274:	65 bb       	out	0x15, r22	; 21
 276:	08 95       	ret
		}			
		else
		{
			CLR_BIT(PORTC,pinnumber);
 278:	25 b3       	in	r18, 0x15	; 21
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	ac 01       	movw	r20, r24
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_write+0xbe>
 282:	44 0f       	add	r20, r20
 284:	55 1f       	adc	r21, r21
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_write+0xba>
 28a:	ba 01       	movw	r22, r20
 28c:	60 95       	com	r22
 28e:	62 23       	and	r22, r18
 290:	65 bb       	out	0x15, r22	; 21
 292:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 294:	41 30       	cpi	r20, 0x01	; 1
 296:	69 f4       	brne	.+26     	; 0x2b2 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);
 298:	22 b3       	in	r18, 0x12	; 18
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	ac 01       	movw	r20, r24
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_write+0xde>
 2a2:	44 0f       	add	r20, r20
 2a4:	55 1f       	adc	r21, r21
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_write+0xda>
 2aa:	ba 01       	movw	r22, r20
 2ac:	62 2b       	or	r22, r18
 2ae:	62 bb       	out	0x12, r22	; 18
 2b0:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 2b2:	22 b3       	in	r18, 0x12	; 18
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	ac 01       	movw	r20, r24
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_write+0xf8>
 2bc:	44 0f       	add	r20, r20
 2be:	55 1f       	adc	r21, r21
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_write+0xf4>
 2c4:	ba 01       	movw	r22, r20
 2c6:	60 95       	com	r22
 2c8:	62 23       	and	r22, r18
 2ca:	62 bb       	out	0x12, r22	; 18
 2cc:	08 95       	ret

000002ce <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 2ce:	82 34       	cpi	r24, 0x42	; 66
 2d0:	f1 f0       	breq	.+60     	; 0x30e <DIO_u8read+0x40>
 2d2:	83 34       	cpi	r24, 0x43	; 67
 2d4:	20 f4       	brcc	.+8      	; 0x2de <DIO_u8read+0x10>
 2d6:	81 34       	cpi	r24, 0x41	; 65
 2d8:	09 f0       	breq	.+2      	; 0x2dc <DIO_u8read+0xe>
 2da:	4f c0       	rjmp	.+158    	; 0x37a <DIO_u8read+0xac>
 2dc:	06 c0       	rjmp	.+12     	; 0x2ea <DIO_u8read+0x1c>
 2de:	83 34       	cpi	r24, 0x43	; 67
 2e0:	41 f1       	breq	.+80     	; 0x332 <DIO_u8read+0x64>
 2e2:	84 34       	cpi	r24, 0x44	; 68
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <DIO_u8read+0x1a>
 2e6:	49 c0       	rjmp	.+146    	; 0x37a <DIO_u8read+0xac>
 2e8:	36 c0       	rjmp	.+108    	; 0x356 <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);
 2ea:	29 b3       	in	r18, 0x19	; 25
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	06 2e       	mov	r0, r22
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_u8read+0x2a>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	0a 94       	dec	r0
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_u8read+0x26>
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	82 23       	and	r24, r18
 300:	93 23       	and	r25, r19
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_u8read+0x3a>
 304:	95 95       	asr	r25
 306:	87 95       	ror	r24
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_u8read+0x36>
		break;
 30c:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);
 30e:	26 b3       	in	r18, 0x16	; 22
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	06 2e       	mov	r0, r22
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_u8read+0x4e>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_u8read+0x4a>
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	82 23       	and	r24, r18
 324:	93 23       	and	r25, r19
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_u8read+0x5e>
 328:	95 95       	asr	r25
 32a:	87 95       	ror	r24
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_u8read+0x5a>
		break;
 330:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);
 332:	23 b3       	in	r18, 0x13	; 19
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	06 2e       	mov	r0, r22
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_u8read+0x72>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_u8read+0x6e>
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	82 23       	and	r24, r18
 348:	93 23       	and	r25, r19
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_u8read+0x82>
 34c:	95 95       	asr	r25
 34e:	87 95       	ror	r24
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_u8read+0x7e>
		break;
 354:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);
 356:	20 b3       	in	r18, 0x10	; 16
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	06 2e       	mov	r0, r22
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_u8read+0x96>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	0a 94       	dec	r0
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_u8read+0x92>
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	82 23       	and	r24, r18
 36c:	93 23       	and	r25, r19
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_u8read+0xa6>
 370:	95 95       	asr	r25
 372:	87 95       	ror	r24
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_u8read+0xa2>
		break;
 378:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 37a:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_value ;
}
 37c:	08 95       	ret

0000037e <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 37e:	82 34       	cpi	r24, 0x42	; 66
 380:	b9 f0       	breq	.+46     	; 0x3b0 <DIO_toggle+0x32>
 382:	83 34       	cpi	r24, 0x43	; 67
 384:	18 f4       	brcc	.+6      	; 0x38c <DIO_toggle+0xe>
 386:	81 34       	cpi	r24, 0x41	; 65
 388:	c9 f5       	brne	.+114    	; 0x3fc <DIO_toggle+0x7e>
 38a:	05 c0       	rjmp	.+10     	; 0x396 <DIO_toggle+0x18>
 38c:	83 34       	cpi	r24, 0x43	; 67
 38e:	e9 f0       	breq	.+58     	; 0x3ca <DIO_toggle+0x4c>
 390:	84 34       	cpi	r24, 0x44	; 68
 392:	a1 f5       	brne	.+104    	; 0x3fc <DIO_toggle+0x7e>
 394:	27 c0       	rjmp	.+78     	; 0x3e4 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);
 396:	2b b3       	in	r18, 0x1b	; 27
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	ac 01       	movw	r20, r24
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_toggle+0x26>
 3a0:	44 0f       	add	r20, r20
 3a2:	55 1f       	adc	r21, r21
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_toggle+0x22>
 3a8:	ba 01       	movw	r22, r20
 3aa:	62 27       	eor	r22, r18
 3ac:	6b bb       	out	0x1b, r22	; 27
		break;
 3ae:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);
 3b0:	28 b3       	in	r18, 0x18	; 24
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	ac 01       	movw	r20, r24
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_toggle+0x40>
 3ba:	44 0f       	add	r20, r20
 3bc:	55 1f       	adc	r21, r21
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_toggle+0x3c>
 3c2:	ba 01       	movw	r22, r20
 3c4:	62 27       	eor	r22, r18
 3c6:	68 bb       	out	0x18, r22	; 24
		break;
 3c8:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);
 3ca:	25 b3       	in	r18, 0x15	; 21
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	ac 01       	movw	r20, r24
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_toggle+0x5a>
 3d4:	44 0f       	add	r20, r20
 3d6:	55 1f       	adc	r21, r21
 3d8:	6a 95       	dec	r22
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_toggle+0x56>
 3dc:	ba 01       	movw	r22, r20
 3de:	62 27       	eor	r22, r18
 3e0:	65 bb       	out	0x15, r22	; 21
		break;
 3e2:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);
 3e4:	22 b3       	in	r18, 0x12	; 18
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	ac 01       	movw	r20, r24
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_toggle+0x74>
 3ee:	44 0f       	add	r20, r20
 3f0:	55 1f       	adc	r21, r21
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_toggle+0x70>
 3f6:	ba 01       	movw	r22, r20
 3f8:	62 27       	eor	r22, r18
 3fa:	62 bb       	out	0x12, r22	; 18
 3fc:	08 95       	ret

000003fe <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 3fe:	82 34       	cpi	r24, 0x42	; 66
 400:	61 f0       	breq	.+24     	; 0x41a <DIO_set_port_direction+0x1c>
 402:	83 34       	cpi	r24, 0x43	; 67
 404:	18 f4       	brcc	.+6      	; 0x40c <DIO_set_port_direction+0xe>
 406:	81 34       	cpi	r24, 0x41	; 65
 408:	69 f4       	brne	.+26     	; 0x424 <DIO_set_port_direction+0x26>
 40a:	05 c0       	rjmp	.+10     	; 0x416 <DIO_set_port_direction+0x18>
 40c:	83 34       	cpi	r24, 0x43	; 67
 40e:	39 f0       	breq	.+14     	; 0x41e <DIO_set_port_direction+0x20>
 410:	84 34       	cpi	r24, 0x44	; 68
 412:	41 f4       	brne	.+16     	; 0x424 <DIO_set_port_direction+0x26>
 414:	06 c0       	rjmp	.+12     	; 0x422 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction;
 416:	6a bb       	out	0x1a, r22	; 26
		break ;
 418:	08 95       	ret
		case 'B':
		DDRB=direction; 
 41a:	67 bb       	out	0x17, r22	; 23
		break ;
 41c:	08 95       	ret
		case 'C' :
		DDRC=direction; 
 41e:	64 bb       	out	0x14, r22	; 20
		break ;
 420:	08 95       	ret
		case 'D':
		DDRD=direction; 
 422:	61 bb       	out	0x11, r22	; 17
 424:	08 95       	ret

00000426 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 426:	82 34       	cpi	r24, 0x42	; 66
 428:	61 f0       	breq	.+24     	; 0x442 <DIO_write_port+0x1c>
 42a:	83 34       	cpi	r24, 0x43	; 67
 42c:	18 f4       	brcc	.+6      	; 0x434 <DIO_write_port+0xe>
 42e:	81 34       	cpi	r24, 0x41	; 65
 430:	69 f4       	brne	.+26     	; 0x44c <DIO_write_port+0x26>
 432:	05 c0       	rjmp	.+10     	; 0x43e <DIO_write_port+0x18>
 434:	83 34       	cpi	r24, 0x43	; 67
 436:	39 f0       	breq	.+14     	; 0x446 <DIO_write_port+0x20>
 438:	84 34       	cpi	r24, 0x44	; 68
 43a:	41 f4       	brne	.+16     	; 0x44c <DIO_write_port+0x26>
 43c:	06 c0       	rjmp	.+12     	; 0x44a <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; 
 43e:	6b bb       	out	0x1b, r22	; 27
		break ;
 440:	08 95       	ret
		case 'B':
		PORTB=portvalue; 
 442:	68 bb       	out	0x18, r22	; 24
		break ;
 444:	08 95       	ret
		case 'C' :
		PORTC=portvalue; 
 446:	65 bb       	out	0x15, r22	; 21
		break ;
 448:	08 95       	ret
		case 'D':
		PORTD=portvalue; 
 44a:	62 bb       	out	0x12, r22	; 18
 44c:	08 95       	ret

0000044e <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 44e:	82 34       	cpi	r24, 0x42	; 66
 450:	61 f0       	breq	.+24     	; 0x46a <DIO_read_port+0x1c>
 452:	83 34       	cpi	r24, 0x43	; 67
 454:	18 f4       	brcc	.+6      	; 0x45c <DIO_read_port+0xe>
 456:	81 34       	cpi	r24, 0x41	; 65
 458:	71 f4       	brne	.+28     	; 0x476 <DIO_read_port+0x28>
 45a:	05 c0       	rjmp	.+10     	; 0x466 <DIO_read_port+0x18>
 45c:	83 34       	cpi	r24, 0x43	; 67
 45e:	39 f0       	breq	.+14     	; 0x46e <DIO_read_port+0x20>
 460:	84 34       	cpi	r24, 0x44	; 68
 462:	49 f4       	brne	.+18     	; 0x476 <DIO_read_port+0x28>
 464:	06 c0       	rjmp	.+12     	; 0x472 <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; 
 466:	89 b3       	in	r24, 0x19	; 25
		break ;
 468:	08 95       	ret
		case 'B':
		return_val=PINB; 
 46a:	86 b3       	in	r24, 0x16	; 22
		break ;
 46c:	08 95       	ret
		case 'C' :
		return_val=PINC; 
 46e:	83 b3       	in	r24, 0x13	; 19
		break ;
 470:	08 95       	ret
		case 'D':
		return_val=PIND; 
 472:	80 b3       	in	r24, 0x10	; 16
		break ;
 474:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 476:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
 478:	08 95       	ret

0000047a <DIO_toggle_port>:

void DIO_toggle_port(unsigned char portname)
{
	switch(portname)
 47a:	82 34       	cpi	r24, 0x42	; 66
 47c:	71 f0       	breq	.+28     	; 0x49a <DIO_toggle_port+0x20>
 47e:	83 34       	cpi	r24, 0x43	; 67
 480:	18 f4       	brcc	.+6      	; 0x488 <DIO_toggle_port+0xe>
 482:	81 34       	cpi	r24, 0x41	; 65
 484:	a9 f4       	brne	.+42     	; 0x4b0 <DIO_toggle_port+0x36>
 486:	05 c0       	rjmp	.+10     	; 0x492 <DIO_toggle_port+0x18>
 488:	83 34       	cpi	r24, 0x43	; 67
 48a:	59 f0       	breq	.+22     	; 0x4a2 <DIO_toggle_port+0x28>
 48c:	84 34       	cpi	r24, 0x44	; 68
 48e:	81 f4       	brne	.+32     	; 0x4b0 <DIO_toggle_port+0x36>
 490:	0c c0       	rjmp	.+24     	; 0x4aa <DIO_toggle_port+0x30>
	{
		case 'A' :
		PORTA=~PORTA;
 492:	8b b3       	in	r24, 0x1b	; 27
 494:	80 95       	com	r24
 496:	8b bb       	out	0x1b, r24	; 27
		break ;
 498:	08 95       	ret
		case 'B':
		PORTB=~PORTB;
 49a:	88 b3       	in	r24, 0x18	; 24
 49c:	80 95       	com	r24
 49e:	88 bb       	out	0x18, r24	; 24
		break ;
 4a0:	08 95       	ret
		case 'C' :
		PORTC=~PORTC;
 4a2:	85 b3       	in	r24, 0x15	; 21
 4a4:	80 95       	com	r24
 4a6:	85 bb       	out	0x15, r24	; 21
		break ;
 4a8:	08 95       	ret
		case 'D':
		PORTD=~PORTD;
 4aa:	82 b3       	in	r24, 0x12	; 18
 4ac:	80 95       	com	r24
 4ae:	82 bb       	out	0x12, r24	; 18
 4b0:	08 95       	ret

000004b2 <main>:
#include "button.h"
#define F_CPU 8000000UL
#include <util/delay.h>
int main(void)
{
	DIO_set_port_direction('A',0xff);
 4b2:	81 e4       	ldi	r24, 0x41	; 65
 4b4:	6f ef       	ldi	r22, 0xFF	; 255
 4b6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DIO_set_port_direction>
	DIO_set_port_direction('B',0x00);
 4ba:	82 e4       	ldi	r24, 0x42	; 66
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DIO_set_port_direction>
	DIO_set_port_direction('D',0xff);
 4c2:	84 e4       	ldi	r24, 0x44	; 68
 4c4:	6f ef       	ldi	r22, 0xFF	; 255
 4c6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DIO_set_port_direction>
	button_init('B',0);
 4ca:	82 e4       	ldi	r24, 0x42	; 66
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	0e 94 49 00 	call	0x92	; 0x92 <button_init>
	DIO_write('D',2,1);
 4d2:	84 e4       	ldi	r24, 0x44	; 68
 4d4:	62 e0       	ldi	r22, 0x02	; 2
 4d6:	41 e0       	ldi	r20, 0x01	; 1
 4d8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
	DIO_write('D',3,1);
 4dc:	84 e4       	ldi	r24, 0x44	; 68
 4de:	63 e0       	ldi	r22, 0x03	; 3
 4e0:	41 e0       	ldi	r20, 0x01	; 1
 4e2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
	char x;
	x=button_read('B',0);
 4e6:	82 e4       	ldi	r24, 0x42	; 66
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	0e 94 50 00 	call	0xa0	; 0xa0 <button_read>
    while(1)
    {
		x=button_read('B',0);
 4ee:	82 e4       	ldi	r24, 0x42	; 66
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	0e 94 50 00 	call	0xa0	; 0xa0 <button_read>
		if (x==0)
 4f6:	88 23       	and	r24, r24
 4f8:	21 f5       	brne	.+72     	; 0x542 <main+0x90>
		{
			
			DIO_write('A',0,0);
 4fa:	81 e4       	ldi	r24, 0x41	; 65
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	40 e0       	ldi	r20, 0x00	; 0
 500:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('A',1,0);
 504:	81 e4       	ldi	r24, 0x41	; 65
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('A',2,1);
 50e:	81 e4       	ldi	r24, 0x41	; 65
 510:	62 e0       	ldi	r22, 0x02	; 2
 512:	41 e0       	ldi	r20, 0x01	; 1
 514:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('A',3,0);
 518:	81 e4       	ldi	r24, 0x41	; 65
 51a:	63 e0       	ldi	r22, 0x03	; 3
 51c:	40 e0       	ldi	r20, 0x00	; 0
 51e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('A',4,1);
 522:	81 e4       	ldi	r24, 0x41	; 65
 524:	64 e0       	ldi	r22, 0x04	; 4
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('D',0,1);
 52c:	84 e4       	ldi	r24, 0x44	; 68
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	41 e0       	ldi	r20, 0x01	; 1
 532:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('D',5,1);
 536:	84 e4       	ldi	r24, 0x44	; 68
 538:	65 e0       	ldi	r22, 0x05	; 5
 53a:	41 e0       	ldi	r20, 0x01	; 1
 53c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
 540:	d6 cf       	rjmp	.-84     	; 0x4ee <main+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 542:	8f ef       	ldi	r24, 0xFF	; 255
 544:	99 e6       	ldi	r25, 0x69	; 105
 546:	a8 e1       	ldi	r26, 0x18	; 24
 548:	81 50       	subi	r24, 0x01	; 1
 54a:	90 40       	sbci	r25, 0x00	; 0
 54c:	a0 40       	sbci	r26, 0x00	; 0
 54e:	e1 f7       	brne	.-8      	; 0x548 <main+0x96>
 550:	00 c0       	rjmp	.+0      	; 0x552 <main+0xa0>
 552:	00 00       	nop
			
		}else
		{
			_delay_ms(1000);
			DIO_write('A',0,0);
 554:	81 e4       	ldi	r24, 0x41	; 65
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('A',1,1);
 55e:	81 e4       	ldi	r24, 0x41	; 65
 560:	61 e0       	ldi	r22, 0x01	; 1
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('A',2,0);
 568:	81 e4       	ldi	r24, 0x41	; 65
 56a:	62 e0       	ldi	r22, 0x02	; 2
 56c:	40 e0       	ldi	r20, 0x00	; 0
 56e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('D',0,1);
 572:	84 e4       	ldi	r24, 0x44	; 68
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('D',5,1);
 57c:	84 e4       	ldi	r24, 0x44	; 68
 57e:	65 e0       	ldi	r22, 0x05	; 5
 580:	41 e0       	ldi	r20, 0x01	; 1
 582:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
 586:	8f ef       	ldi	r24, 0xFF	; 255
 588:	99 e6       	ldi	r25, 0x69	; 105
 58a:	a8 e1       	ldi	r26, 0x18	; 24
 58c:	81 50       	subi	r24, 0x01	; 1
 58e:	90 40       	sbci	r25, 0x00	; 0
 590:	a0 40       	sbci	r26, 0x00	; 0
 592:	e1 f7       	brne	.-8      	; 0x58c <main+0xda>
 594:	00 c0       	rjmp	.+0      	; 0x596 <main+0xe4>
 596:	00 00       	nop
			_delay_ms(1000);
			DIO_write('A',0,1);
 598:	81 e4       	ldi	r24, 0x41	; 65
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	41 e0       	ldi	r20, 0x01	; 1
 59e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('A',1,0);
 5a2:	81 e4       	ldi	r24, 0x41	; 65
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	40 e0       	ldi	r20, 0x00	; 0
 5a8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('A',2,0);
 5ac:	81 e4       	ldi	r24, 0x41	; 65
 5ae:	62 e0       	ldi	r22, 0x02	; 2
 5b0:	40 e0       	ldi	r20, 0x00	; 0
 5b2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('A',3,1);
 5b6:	81 e4       	ldi	r24, 0x41	; 65
 5b8:	63 e0       	ldi	r22, 0x03	; 3
 5ba:	41 e0       	ldi	r20, 0x01	; 1
 5bc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('A',4,0);
 5c0:	81 e4       	ldi	r24, 0x41	; 65
 5c2:	64 e0       	ldi	r22, 0x04	; 4
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('D',0,0);
 5ca:	84 e4       	ldi	r24, 0x44	; 68
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	40 e0       	ldi	r20, 0x00	; 0
 5d0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('D',5,0);
 5d4:	84 e4       	ldi	r24, 0x44	; 68
 5d6:	65 e0       	ldi	r22, 0x05	; 5
 5d8:	40 e0       	ldi	r20, 0x00	; 0
 5da:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			while (button_read('B', 0) != 0) {
 5de:	82 e4       	ldi	r24, 0x42	; 66
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	0e 94 50 00 	call	0xa0	; 0xa0 <button_read>
 5e6:	88 23       	and	r24, r24
 5e8:	d1 f7       	brne	.-12     	; 0x5de <main+0x12c>
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	99 e6       	ldi	r25, 0x69	; 105
 5ee:	a8 e1       	ldi	r26, 0x18	; 24
 5f0:	81 50       	subi	r24, 0x01	; 1
 5f2:	90 40       	sbci	r25, 0x00	; 0
 5f4:	a0 40       	sbci	r26, 0x00	; 0
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <main+0x13e>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <main+0x148>
 5fa:	00 00       	nop
				
			}
			_delay_ms(1000);
			DIO_write('A',0,0);
 5fc:	81 e4       	ldi	r24, 0x41	; 65
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('A',1,1);
 606:	81 e4       	ldi	r24, 0x41	; 65
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	41 e0       	ldi	r20, 0x01	; 1
 60c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
			DIO_write('A',2,0);
 610:	81 e4       	ldi	r24, 0x41	; 65
 612:	62 e0       	ldi	r22, 0x02	; 2
 614:	40 e0       	ldi	r20, 0x00	; 0
 616:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write>
 61a:	8f ef       	ldi	r24, 0xFF	; 255
 61c:	99 e6       	ldi	r25, 0x69	; 105
 61e:	a8 e1       	ldi	r26, 0x18	; 24
 620:	81 50       	subi	r24, 0x01	; 1
 622:	90 40       	sbci	r25, 0x00	; 0
 624:	a0 40       	sbci	r26, 0x00	; 0
 626:	e1 f7       	brne	.-8      	; 0x620 <main+0x16e>
 628:	00 c0       	rjmp	.+0      	; 0x62a <main+0x178>
 62a:	00 00       	nop
 62c:	60 cf       	rjmp	.-320    	; 0x4ee <main+0x3c>

0000062e <_exit>:
 62e:	f8 94       	cli

00000630 <__stop_program>:
 630:	ff cf       	rjmp	.-2      	; 0x630 <__stop_program>
