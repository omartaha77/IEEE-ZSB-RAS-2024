
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000006b8  0000072c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000e80  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000842  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d0  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f4  00000000  00000000  00001932  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c0  00000000  00000000  00001ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000534  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include <util/delay.h>
#include "DIO.h"
int main(void)
{
	DIO_set_port_direction('A',0xff);
  92:	81 e4       	ldi	r24, 0x41	; 65
  94:	6f ef       	ldi	r22, 0xFF	; 255
  96:	0e 94 00 03 	call	0x600	; 0x600 <DIO_set_port_direction>
	DIO_set_port_direction('B',0xff);
  9a:	82 e4       	ldi	r24, 0x42	; 66
  9c:	6f ef       	ldi	r22, 0xFF	; 255
  9e:	0e 94 00 03 	call	0x600	; 0x600 <DIO_set_port_direction>
	int count=1;
  a2:	c1 e0       	ldi	r28, 0x01	; 1
  a4:	d0 e0       	ldi	r29, 0x00	; 0
			DIO_write_port('B',0x7B);
			count++;
			break;
			case 7:
			DIO_write_port('B',0x25);
			count++;
  a6:	08 e0       	ldi	r16, 0x08	; 8
  a8:	10 e0       	ldi	r17, 0x00	; 0
			DIO_write_port('B',0x6B);
			count++;
			break;
			case 6:
			DIO_write_port('B',0x7B);
			count++;
  aa:	0f 2e       	mov	r0, r31
  ac:	f7 e0       	ldi	r31, 0x07	; 7
  ae:	ef 2e       	mov	r14, r31
  b0:	ff 24       	eor	r15, r15
  b2:	f0 2d       	mov	r31, r0
			DIO_write_port('B',0x25);
			count++;
			break;
			case 8:
			DIO_write_port('B',0x7F);
			count++;
  b4:	0f 2e       	mov	r0, r31
  b6:	f9 e0       	ldi	r31, 0x09	; 9
  b8:	cf 2e       	mov	r12, r31
  ba:	dd 24       	eor	r13, r13
  bc:	f0 2d       	mov	r31, r0
			break;
			case 9:
			DIO_write_port('B',0x6F);
			count=1;
  be:	aa 24       	eor	r10, r10
  c0:	bb 24       	eor	r11, r11
  c2:	a3 94       	inc	r10
			DIO_write_port('B',0x24);
			count++;
			break;
			case 2:
			DIO_write_port('B',0x5D);
			count++;
  c4:	0f 2e       	mov	r0, r31
  c6:	f3 e0       	ldi	r31, 0x03	; 3
  c8:	8f 2e       	mov	r8, r31
  ca:	99 24       	eor	r9, r9
  cc:	f0 2d       	mov	r31, r0
			break;
			case 3:
			DIO_write_port('B',0x6D);
			count++;
  ce:	66 24       	eor	r6, r6
  d0:	77 24       	eor	r7, r7
  d2:	68 94       	set
  d4:	62 f8       	bld	r6, 2
			break;
			case 4:
			DIO_write_port('B',0x2E);
			count++;
  d6:	0f 2e       	mov	r0, r31
  d8:	f5 e0       	ldi	r31, 0x05	; 5
  da:	4f 2e       	mov	r4, r31
  dc:	55 24       	eor	r5, r5
  de:	f0 2d       	mov	r31, r0
		_delay_ms(1000);
		switch(count)
		{
			case 1:
			DIO_write_port('B',0x24);
			count++;
  e0:	22 24       	eor	r2, r2
  e2:	33 24       	eor	r3, r3
  e4:	68 94       	set
  e6:	21 f8       	bld	r2, 1
	DIO_set_port_direction('A',0xff);
	DIO_set_port_direction('B',0xff);
	int count=1;
	while(1)
	{
		DIO_write_port('A',0x77);
  e8:	81 e4       	ldi	r24, 0x41	; 65
  ea:	67 e7       	ldi	r22, 0x77	; 119
  ec:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	99 e6       	ldi	r25, 0x69	; 105
  f4:	a8 e1       	ldi	r26, 0x18	; 24
  f6:	81 50       	subi	r24, 0x01	; 1
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	a0 40       	sbci	r26, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x64>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x6e>
 100:	00 00       	nop
		_delay_ms(1000);
		DIO_write_port('A',0x24);
 102:	81 e4       	ldi	r24, 0x41	; 65
 104:	64 e2       	ldi	r22, 0x24	; 36
 106:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	99 e6       	ldi	r25, 0x69	; 105
 10e:	a8 e1       	ldi	r26, 0x18	; 24
 110:	81 50       	subi	r24, 0x01	; 1
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	a0 40       	sbci	r26, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x7e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x88>
 11a:	00 00       	nop
		_delay_ms(1000);
		DIO_write_port('A',0x5D);
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	6d e5       	ldi	r22, 0x5D	; 93
 120:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	99 e6       	ldi	r25, 0x69	; 105
 128:	a8 e1       	ldi	r26, 0x18	; 24
 12a:	81 50       	subi	r24, 0x01	; 1
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	a0 40       	sbci	r26, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x98>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0xa2>
 134:	00 00       	nop
		_delay_ms(1000);
		DIO_write_port('A',0x6D);
 136:	81 e4       	ldi	r24, 0x41	; 65
 138:	6d e6       	ldi	r22, 0x6D	; 109
 13a:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	99 e6       	ldi	r25, 0x69	; 105
 142:	a8 e1       	ldi	r26, 0x18	; 24
 144:	81 50       	subi	r24, 0x01	; 1
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	a0 40       	sbci	r26, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0xb2>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xbc>
 14e:	00 00       	nop
		_delay_ms(1000);
		DIO_write_port('A',0x2E);
 150:	81 e4       	ldi	r24, 0x41	; 65
 152:	6e e2       	ldi	r22, 0x2E	; 46
 154:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	99 e6       	ldi	r25, 0x69	; 105
 15c:	a8 e1       	ldi	r26, 0x18	; 24
 15e:	81 50       	subi	r24, 0x01	; 1
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	a0 40       	sbci	r26, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0xcc>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0xd6>
 168:	00 00       	nop
		_delay_ms(1000);
		DIO_write_port('A',0x6B);
 16a:	81 e4       	ldi	r24, 0x41	; 65
 16c:	6b e6       	ldi	r22, 0x6B	; 107
 16e:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	99 e6       	ldi	r25, 0x69	; 105
 176:	a8 e1       	ldi	r26, 0x18	; 24
 178:	81 50       	subi	r24, 0x01	; 1
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	a0 40       	sbci	r26, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0xe6>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0xf0>
 182:	00 00       	nop
		_delay_ms(1000);
		DIO_write_port('A',0x7B);
 184:	81 e4       	ldi	r24, 0x41	; 65
 186:	6b e7       	ldi	r22, 0x7B	; 123
 188:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	99 e6       	ldi	r25, 0x69	; 105
 190:	a8 e1       	ldi	r26, 0x18	; 24
 192:	81 50       	subi	r24, 0x01	; 1
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	a0 40       	sbci	r26, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x100>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x10a>
 19c:	00 00       	nop
		_delay_ms(1000);
		DIO_write_port('A',0x25);
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	65 e2       	ldi	r22, 0x25	; 37
 1a2:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	99 e6       	ldi	r25, 0x69	; 105
 1aa:	a8 e1       	ldi	r26, 0x18	; 24
 1ac:	81 50       	subi	r24, 0x01	; 1
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	a0 40       	sbci	r26, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x11a>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x124>
 1b6:	00 00       	nop
		_delay_ms(1000);
		DIO_write_port('A',0x7F);
 1b8:	81 e4       	ldi	r24, 0x41	; 65
 1ba:	6f e7       	ldi	r22, 0x7F	; 127
 1bc:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	99 e6       	ldi	r25, 0x69	; 105
 1c4:	a8 e1       	ldi	r26, 0x18	; 24
 1c6:	81 50       	subi	r24, 0x01	; 1
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	a0 40       	sbci	r26, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x134>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x13e>
 1d0:	00 00       	nop
		_delay_ms(1000);
		DIO_write_port('A',0x6F);
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	6f e6       	ldi	r22, 0x6F	; 111
 1d6:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	99 e6       	ldi	r25, 0x69	; 105
 1de:	a8 e1       	ldi	r26, 0x18	; 24
 1e0:	81 50       	subi	r24, 0x01	; 1
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	a0 40       	sbci	r26, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x14e>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x158>
 1ea:	00 00       	nop
		_delay_ms(1000);
		switch(count)
 1ec:	c5 30       	cpi	r28, 0x05	; 5
 1ee:	d1 05       	cpc	r29, r1
 1f0:	e1 f1       	breq	.+120    	; 0x26a <main+0x1d8>
 1f2:	c6 30       	cpi	r28, 0x06	; 6
 1f4:	d1 05       	cpc	r29, r1
 1f6:	9c f4       	brge	.+38     	; 0x21e <main+0x18c>
 1f8:	c2 30       	cpi	r28, 0x02	; 2
 1fa:	d1 05       	cpc	r29, r1
 1fc:	21 f1       	breq	.+72     	; 0x246 <main+0x1b4>
 1fe:	c3 30       	cpi	r28, 0x03	; 3
 200:	d1 05       	cpc	r29, r1
 202:	2c f4       	brge	.+10     	; 0x20e <main+0x17c>
 204:	c1 30       	cpi	r28, 0x01	; 1
 206:	d1 05       	cpc	r29, r1
 208:	09 f0       	breq	.+2      	; 0x20c <main+0x17a>
 20a:	6e cf       	rjmp	.-292    	; 0xe8 <main+0x56>
 20c:	16 c0       	rjmp	.+44     	; 0x23a <main+0x1a8>
 20e:	c3 30       	cpi	r28, 0x03	; 3
 210:	d1 05       	cpc	r29, r1
 212:	f9 f0       	breq	.+62     	; 0x252 <main+0x1c0>
 214:	c4 30       	cpi	r28, 0x04	; 4
 216:	d1 05       	cpc	r29, r1
 218:	09 f0       	breq	.+2      	; 0x21c <main+0x18a>
 21a:	66 cf       	rjmp	.-308    	; 0xe8 <main+0x56>
 21c:	20 c0       	rjmp	.+64     	; 0x25e <main+0x1cc>
 21e:	c7 30       	cpi	r28, 0x07	; 7
 220:	d1 05       	cpc	r29, r1
 222:	81 f1       	breq	.+96     	; 0x284 <main+0x1f2>
 224:	c7 30       	cpi	r28, 0x07	; 7
 226:	d1 05       	cpc	r29, r1
 228:	3c f1       	brlt	.+78     	; 0x278 <main+0x1e6>
 22a:	c8 30       	cpi	r28, 0x08	; 8
 22c:	d1 05       	cpc	r29, r1
 22e:	81 f1       	breq	.+96     	; 0x290 <main+0x1fe>
 230:	c9 30       	cpi	r28, 0x09	; 9
 232:	d1 05       	cpc	r29, r1
 234:	09 f0       	breq	.+2      	; 0x238 <main+0x1a6>
 236:	58 cf       	rjmp	.-336    	; 0xe8 <main+0x56>
 238:	31 c0       	rjmp	.+98     	; 0x29c <main+0x20a>
		{
			case 1:
			DIO_write_port('B',0x24);
 23a:	82 e4       	ldi	r24, 0x42	; 66
 23c:	64 e2       	ldi	r22, 0x24	; 36
 23e:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
			count++;
 242:	e1 01       	movw	r28, r2
			break;
 244:	51 cf       	rjmp	.-350    	; 0xe8 <main+0x56>
			case 2:
			DIO_write_port('B',0x5D);
 246:	82 e4       	ldi	r24, 0x42	; 66
 248:	6d e5       	ldi	r22, 0x5D	; 93
 24a:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
			count++;
 24e:	e4 01       	movw	r28, r8
			break;
 250:	4b cf       	rjmp	.-362    	; 0xe8 <main+0x56>
			case 3:
			DIO_write_port('B',0x6D);
 252:	82 e4       	ldi	r24, 0x42	; 66
 254:	6d e6       	ldi	r22, 0x6D	; 109
 256:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
			count++;
 25a:	e3 01       	movw	r28, r6
			break;
 25c:	45 cf       	rjmp	.-374    	; 0xe8 <main+0x56>
			case 4:
			DIO_write_port('B',0x2E);
 25e:	82 e4       	ldi	r24, 0x42	; 66
 260:	6e e2       	ldi	r22, 0x2E	; 46
 262:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
			count++;
 266:	e2 01       	movw	r28, r4
			break;
 268:	3f cf       	rjmp	.-386    	; 0xe8 <main+0x56>
			case 5:
			DIO_write_port('B',0x6B);
 26a:	82 e4       	ldi	r24, 0x42	; 66
 26c:	6b e6       	ldi	r22, 0x6B	; 107
 26e:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
			count++;
 272:	c6 e0       	ldi	r28, 0x06	; 6
 274:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 276:	38 cf       	rjmp	.-400    	; 0xe8 <main+0x56>
			case 6:
			DIO_write_port('B',0x7B);
 278:	82 e4       	ldi	r24, 0x42	; 66
 27a:	6b e7       	ldi	r22, 0x7B	; 123
 27c:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
			count++;
 280:	e7 01       	movw	r28, r14
			break;
 282:	32 cf       	rjmp	.-412    	; 0xe8 <main+0x56>
			case 7:
			DIO_write_port('B',0x25);
 284:	82 e4       	ldi	r24, 0x42	; 66
 286:	65 e2       	ldi	r22, 0x25	; 37
 288:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
			count++;
 28c:	e8 01       	movw	r28, r16
			break;
 28e:	2c cf       	rjmp	.-424    	; 0xe8 <main+0x56>
			case 8:
			DIO_write_port('B',0x7F);
 290:	82 e4       	ldi	r24, 0x42	; 66
 292:	6f e7       	ldi	r22, 0x7F	; 127
 294:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
			count++;
 298:	e6 01       	movw	r28, r12
			break;
 29a:	26 cf       	rjmp	.-436    	; 0xe8 <main+0x56>
			case 9:
			DIO_write_port('B',0x6F);
 29c:	82 e4       	ldi	r24, 0x42	; 66
 29e:	6f e6       	ldi	r22, 0x6F	; 111
 2a0:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
			count=1;
 2a4:	e5 01       	movw	r28, r10
			break;
 2a6:	20 cf       	rjmp	.-448    	; 0xe8 <main+0x56>

000002a8 <DIO_setPINdir>:

#include "std_macros.h"
#include <avr/io.h>
void DIO_setPINdir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
 2a8:	84 34       	cpi	r24, 0x44	; 68
 2aa:	09 f4       	brne	.+2      	; 0x2ae <DIO_setPINdir+0x6>
 2ac:	71 c0       	rjmp	.+226    	; 0x390 <DIO_setPINdir+0xe8>
 2ae:	85 34       	cpi	r24, 0x45	; 69
 2b0:	48 f4       	brcc	.+18     	; 0x2c4 <DIO_setPINdir+0x1c>
 2b2:	82 34       	cpi	r24, 0x42	; 66
 2b4:	99 f1       	breq	.+102    	; 0x31c <DIO_setPINdir+0x74>
 2b6:	83 34       	cpi	r24, 0x43	; 67
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <DIO_setPINdir+0x14>
 2ba:	4d c0       	rjmp	.+154    	; 0x356 <DIO_setPINdir+0xae>
 2bc:	81 34       	cpi	r24, 0x41	; 65
 2be:	09 f0       	breq	.+2      	; 0x2c2 <DIO_setPINdir+0x1a>
 2c0:	83 c0       	rjmp	.+262    	; 0x3c8 <DIO_setPINdir+0x120>
 2c2:	0f c0       	rjmp	.+30     	; 0x2e2 <DIO_setPINdir+0x3a>
 2c4:	82 36       	cpi	r24, 0x62	; 98
 2c6:	51 f1       	breq	.+84     	; 0x31c <DIO_setPINdir+0x74>
 2c8:	83 36       	cpi	r24, 0x63	; 99
 2ca:	20 f4       	brcc	.+8      	; 0x2d4 <DIO_setPINdir+0x2c>
 2cc:	81 36       	cpi	r24, 0x61	; 97
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <DIO_setPINdir+0x2a>
 2d0:	7b c0       	rjmp	.+246    	; 0x3c8 <DIO_setPINdir+0x120>
 2d2:	07 c0       	rjmp	.+14     	; 0x2e2 <DIO_setPINdir+0x3a>
 2d4:	83 36       	cpi	r24, 0x63	; 99
 2d6:	09 f4       	brne	.+2      	; 0x2da <DIO_setPINdir+0x32>
 2d8:	3e c0       	rjmp	.+124    	; 0x356 <DIO_setPINdir+0xae>
 2da:	84 36       	cpi	r24, 0x64	; 100
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <DIO_setPINdir+0x38>
 2de:	74 c0       	rjmp	.+232    	; 0x3c8 <DIO_setPINdir+0x120>
 2e0:	57 c0       	rjmp	.+174    	; 0x390 <DIO_setPINdir+0xe8>
	{
		case 'A':
		case 'a':
		if (direction==1)
 2e2:	41 30       	cpi	r20, 0x01	; 1
 2e4:	69 f4       	brne	.+26     	; 0x300 <DIO_setPINdir+0x58>
		{
			SET_BIT(DDRA,pinnumber);
 2e6:	4a b3       	in	r20, 0x1a	; 26
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	c9 01       	movw	r24, r18
 2ee:	06 2e       	mov	r0, r22
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_setPINdir+0x4e>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_setPINdir+0x4a>
 2fa:	84 2b       	or	r24, r20
 2fc:	8a bb       	out	0x1a, r24	; 26
 2fe:	10 c0       	rjmp	.+32     	; 0x320 <DIO_setPINdir+0x78>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);
 300:	4a b3       	in	r20, 0x1a	; 26
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	c9 01       	movw	r24, r18
 308:	06 2e       	mov	r0, r22
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_setPINdir+0x68>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_setPINdir+0x64>
 314:	80 95       	com	r24
 316:	84 23       	and	r24, r20
 318:	8a bb       	out	0x1a, r24	; 26
 31a:	0f c0       	rjmp	.+30     	; 0x33a <DIO_setPINdir+0x92>
		}
		case 'B':
		case 'b':
		if(direction==1)
 31c:	41 30       	cpi	r20, 0x01	; 1
 31e:	69 f4       	brne	.+26     	; 0x33a <DIO_setPINdir+0x92>
		{
			SET_BIT(DDRB,pinnumber);
 320:	27 b3       	in	r18, 0x17	; 23
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	ac 01       	movw	r20, r24
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_setPINdir+0x86>
 32a:	44 0f       	add	r20, r20
 32c:	55 1f       	adc	r21, r21
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_setPINdir+0x82>
 332:	ba 01       	movw	r22, r20
 334:	62 2b       	or	r22, r18
 336:	67 bb       	out	0x17, r22	; 23
 338:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);
 33a:	27 b3       	in	r18, 0x17	; 23
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	ac 01       	movw	r20, r24
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_setPINdir+0xa0>
 344:	44 0f       	add	r20, r20
 346:	55 1f       	adc	r21, r21
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_setPINdir+0x9c>
 34c:	ba 01       	movw	r22, r20
 34e:	60 95       	com	r22
 350:	62 23       	and	r22, r18
 352:	67 bb       	out	0x17, r22	; 23
 354:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(direction==1)
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	69 f4       	brne	.+26     	; 0x374 <DIO_setPINdir+0xcc>
		{
			SET_BIT(DDRC,pinnumber);
 35a:	24 b3       	in	r18, 0x14	; 20
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	ac 01       	movw	r20, r24
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_setPINdir+0xc0>
 364:	44 0f       	add	r20, r20
 366:	55 1f       	adc	r21, r21
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_setPINdir+0xbc>
 36c:	ba 01       	movw	r22, r20
 36e:	62 2b       	or	r22, r18
 370:	64 bb       	out	0x14, r22	; 20
 372:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);
 374:	24 b3       	in	r18, 0x14	; 20
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	ac 01       	movw	r20, r24
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_setPINdir+0xda>
 37e:	44 0f       	add	r20, r20
 380:	55 1f       	adc	r21, r21
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_setPINdir+0xd6>
 386:	ba 01       	movw	r22, r20
 388:	60 95       	com	r22
 38a:	62 23       	and	r22, r18
 38c:	64 bb       	out	0x14, r22	; 20
 38e:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(direction==1)
 390:	41 30       	cpi	r20, 0x01	; 1
 392:	69 f4       	brne	.+26     	; 0x3ae <DIO_setPINdir+0x106>
		{
			SET_BIT(DDRD,pinnumber);
 394:	21 b3       	in	r18, 0x11	; 17
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	ac 01       	movw	r20, r24
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_setPINdir+0xfa>
 39e:	44 0f       	add	r20, r20
 3a0:	55 1f       	adc	r21, r21
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_setPINdir+0xf6>
 3a6:	ba 01       	movw	r22, r20
 3a8:	62 2b       	or	r22, r18
 3aa:	61 bb       	out	0x11, r22	; 17
 3ac:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);
 3ae:	21 b3       	in	r18, 0x11	; 17
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	ac 01       	movw	r20, r24
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_setPINdir+0x114>
 3b8:	44 0f       	add	r20, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_setPINdir+0x110>
 3c0:	ba 01       	movw	r22, r20
 3c2:	60 95       	com	r22
 3c4:	62 23       	and	r22, r18
 3c6:	61 bb       	out	0x11, r22	; 17
 3c8:	08 95       	ret

000003ca <DIO_write>:
	}
}

void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 3ca:	82 34       	cpi	r24, 0x42	; 66
 3cc:	51 f1       	breq	.+84     	; 0x422 <DIO_write+0x58>
 3ce:	83 34       	cpi	r24, 0x43	; 67
 3d0:	20 f4       	brcc	.+8      	; 0x3da <DIO_write+0x10>
 3d2:	81 34       	cpi	r24, 0x41	; 65
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <DIO_write+0xe>
 3d6:	7b c0       	rjmp	.+246    	; 0x4ce <DIO_write+0x104>
 3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <DIO_write+0x1e>
 3da:	83 34       	cpi	r24, 0x43	; 67
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <DIO_write+0x16>
 3de:	3e c0       	rjmp	.+124    	; 0x45c <DIO_write+0x92>
 3e0:	84 34       	cpi	r24, 0x44	; 68
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <DIO_write+0x1c>
 3e4:	74 c0       	rjmp	.+232    	; 0x4ce <DIO_write+0x104>
 3e6:	57 c0       	rjmp	.+174    	; 0x496 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 3e8:	41 30       	cpi	r20, 0x01	; 1
 3ea:	69 f4       	brne	.+26     	; 0x406 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 3ec:	2b b3       	in	r18, 0x1b	; 27
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	ac 01       	movw	r20, r24
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_write+0x30>
 3f6:	44 0f       	add	r20, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_write+0x2c>
 3fe:	ba 01       	movw	r22, r20
 400:	62 2b       	or	r22, r18
 402:	6b bb       	out	0x1b, r22	; 27
 404:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 406:	2b b3       	in	r18, 0x1b	; 27
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	ac 01       	movw	r20, r24
 40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_write+0x4a>
 410:	44 0f       	add	r20, r20
 412:	55 1f       	adc	r21, r21
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_write+0x46>
 418:	ba 01       	movw	r22, r20
 41a:	60 95       	com	r22
 41c:	62 23       	and	r22, r18
 41e:	6b bb       	out	0x1b, r22	; 27
 420:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 422:	41 30       	cpi	r20, 0x01	; 1
 424:	69 f4       	brne	.+26     	; 0x440 <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 426:	28 b3       	in	r18, 0x18	; 24
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	ac 01       	movw	r20, r24
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_write+0x6a>
 430:	44 0f       	add	r20, r20
 432:	55 1f       	adc	r21, r21
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_write+0x66>
 438:	ba 01       	movw	r22, r20
 43a:	62 2b       	or	r22, r18
 43c:	68 bb       	out	0x18, r22	; 24
 43e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 440:	28 b3       	in	r18, 0x18	; 24
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	ac 01       	movw	r20, r24
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_write+0x84>
 44a:	44 0f       	add	r20, r20
 44c:	55 1f       	adc	r21, r21
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_write+0x80>
 452:	ba 01       	movw	r22, r20
 454:	60 95       	com	r22
 456:	62 23       	and	r22, r18
 458:	68 bb       	out	0x18, r22	; 24
 45a:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 45c:	41 30       	cpi	r20, 0x01	; 1
 45e:	69 f4       	brne	.+26     	; 0x47a <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
 460:	25 b3       	in	r18, 0x15	; 21
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	ac 01       	movw	r20, r24
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_write+0xa4>
 46a:	44 0f       	add	r20, r20
 46c:	55 1f       	adc	r21, r21
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_write+0xa0>
 472:	ba 01       	movw	r22, r20
 474:	62 2b       	or	r22, r18
 476:	65 bb       	out	0x15, r22	; 21
 478:	08 95       	ret
		}			
		else
		{
			CLR_BIT(PORTC,pinnumber);
 47a:	25 b3       	in	r18, 0x15	; 21
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	ac 01       	movw	r20, r24
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_write+0xbe>
 484:	44 0f       	add	r20, r20
 486:	55 1f       	adc	r21, r21
 488:	6a 95       	dec	r22
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_write+0xba>
 48c:	ba 01       	movw	r22, r20
 48e:	60 95       	com	r22
 490:	62 23       	and	r22, r18
 492:	65 bb       	out	0x15, r22	; 21
 494:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 496:	41 30       	cpi	r20, 0x01	; 1
 498:	69 f4       	brne	.+26     	; 0x4b4 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);
 49a:	22 b3       	in	r18, 0x12	; 18
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	ac 01       	movw	r20, r24
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_write+0xde>
 4a4:	44 0f       	add	r20, r20
 4a6:	55 1f       	adc	r21, r21
 4a8:	6a 95       	dec	r22
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_write+0xda>
 4ac:	ba 01       	movw	r22, r20
 4ae:	62 2b       	or	r22, r18
 4b0:	62 bb       	out	0x12, r22	; 18
 4b2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 4b4:	22 b3       	in	r18, 0x12	; 18
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	ac 01       	movw	r20, r24
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_write+0xf8>
 4be:	44 0f       	add	r20, r20
 4c0:	55 1f       	adc	r21, r21
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_write+0xf4>
 4c6:	ba 01       	movw	r22, r20
 4c8:	60 95       	com	r22
 4ca:	62 23       	and	r22, r18
 4cc:	62 bb       	out	0x12, r22	; 18
 4ce:	08 95       	ret

000004d0 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 4d0:	82 34       	cpi	r24, 0x42	; 66
 4d2:	f1 f0       	breq	.+60     	; 0x510 <DIO_u8read+0x40>
 4d4:	83 34       	cpi	r24, 0x43	; 67
 4d6:	20 f4       	brcc	.+8      	; 0x4e0 <DIO_u8read+0x10>
 4d8:	81 34       	cpi	r24, 0x41	; 65
 4da:	09 f0       	breq	.+2      	; 0x4de <DIO_u8read+0xe>
 4dc:	4f c0       	rjmp	.+158    	; 0x57c <DIO_u8read+0xac>
 4de:	06 c0       	rjmp	.+12     	; 0x4ec <DIO_u8read+0x1c>
 4e0:	83 34       	cpi	r24, 0x43	; 67
 4e2:	41 f1       	breq	.+80     	; 0x534 <DIO_u8read+0x64>
 4e4:	84 34       	cpi	r24, 0x44	; 68
 4e6:	09 f0       	breq	.+2      	; 0x4ea <DIO_u8read+0x1a>
 4e8:	49 c0       	rjmp	.+146    	; 0x57c <DIO_u8read+0xac>
 4ea:	36 c0       	rjmp	.+108    	; 0x558 <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);
 4ec:	29 b3       	in	r18, 0x19	; 25
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	06 2e       	mov	r0, r22
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_u8read+0x2a>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	0a 94       	dec	r0
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_u8read+0x26>
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	82 23       	and	r24, r18
 502:	93 23       	and	r25, r19
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_u8read+0x3a>
 506:	95 95       	asr	r25
 508:	87 95       	ror	r24
 50a:	6a 95       	dec	r22
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_u8read+0x36>
		break;
 50e:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);
 510:	26 b3       	in	r18, 0x16	; 22
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	06 2e       	mov	r0, r22
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_u8read+0x4e>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	0a 94       	dec	r0
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_u8read+0x4a>
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	82 23       	and	r24, r18
 526:	93 23       	and	r25, r19
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_u8read+0x5e>
 52a:	95 95       	asr	r25
 52c:	87 95       	ror	r24
 52e:	6a 95       	dec	r22
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_u8read+0x5a>
		break;
 532:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);
 534:	23 b3       	in	r18, 0x13	; 19
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	06 2e       	mov	r0, r22
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_u8read+0x72>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	0a 94       	dec	r0
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_u8read+0x6e>
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	82 23       	and	r24, r18
 54a:	93 23       	and	r25, r19
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_u8read+0x82>
 54e:	95 95       	asr	r25
 550:	87 95       	ror	r24
 552:	6a 95       	dec	r22
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_u8read+0x7e>
		break;
 556:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);
 558:	20 b3       	in	r18, 0x10	; 16
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	06 2e       	mov	r0, r22
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_u8read+0x96>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	0a 94       	dec	r0
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_u8read+0x92>
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	82 23       	and	r24, r18
 56e:	93 23       	and	r25, r19
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_u8read+0xa6>
 572:	95 95       	asr	r25
 574:	87 95       	ror	r24
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_u8read+0xa2>
		break;
 57a:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 57c:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_value ;
}
 57e:	08 95       	ret

00000580 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 580:	82 34       	cpi	r24, 0x42	; 66
 582:	b9 f0       	breq	.+46     	; 0x5b2 <DIO_toggle+0x32>
 584:	83 34       	cpi	r24, 0x43	; 67
 586:	18 f4       	brcc	.+6      	; 0x58e <DIO_toggle+0xe>
 588:	81 34       	cpi	r24, 0x41	; 65
 58a:	c9 f5       	brne	.+114    	; 0x5fe <DIO_toggle+0x7e>
 58c:	05 c0       	rjmp	.+10     	; 0x598 <DIO_toggle+0x18>
 58e:	83 34       	cpi	r24, 0x43	; 67
 590:	e9 f0       	breq	.+58     	; 0x5cc <DIO_toggle+0x4c>
 592:	84 34       	cpi	r24, 0x44	; 68
 594:	a1 f5       	brne	.+104    	; 0x5fe <DIO_toggle+0x7e>
 596:	27 c0       	rjmp	.+78     	; 0x5e6 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);
 598:	2b b3       	in	r18, 0x1b	; 27
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	ac 01       	movw	r20, r24
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_toggle+0x26>
 5a2:	44 0f       	add	r20, r20
 5a4:	55 1f       	adc	r21, r21
 5a6:	6a 95       	dec	r22
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_toggle+0x22>
 5aa:	ba 01       	movw	r22, r20
 5ac:	62 27       	eor	r22, r18
 5ae:	6b bb       	out	0x1b, r22	; 27
		break;
 5b0:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);
 5b2:	28 b3       	in	r18, 0x18	; 24
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	ac 01       	movw	r20, r24
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <DIO_toggle+0x40>
 5bc:	44 0f       	add	r20, r20
 5be:	55 1f       	adc	r21, r21
 5c0:	6a 95       	dec	r22
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <DIO_toggle+0x3c>
 5c4:	ba 01       	movw	r22, r20
 5c6:	62 27       	eor	r22, r18
 5c8:	68 bb       	out	0x18, r22	; 24
		break;
 5ca:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);
 5cc:	25 b3       	in	r18, 0x15	; 21
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	ac 01       	movw	r20, r24
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_toggle+0x5a>
 5d6:	44 0f       	add	r20, r20
 5d8:	55 1f       	adc	r21, r21
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_toggle+0x56>
 5de:	ba 01       	movw	r22, r20
 5e0:	62 27       	eor	r22, r18
 5e2:	65 bb       	out	0x15, r22	; 21
		break;
 5e4:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);
 5e6:	22 b3       	in	r18, 0x12	; 18
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	ac 01       	movw	r20, r24
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_toggle+0x74>
 5f0:	44 0f       	add	r20, r20
 5f2:	55 1f       	adc	r21, r21
 5f4:	6a 95       	dec	r22
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_toggle+0x70>
 5f8:	ba 01       	movw	r22, r20
 5fa:	62 27       	eor	r22, r18
 5fc:	62 bb       	out	0x12, r22	; 18
 5fe:	08 95       	ret

00000600 <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 600:	82 34       	cpi	r24, 0x42	; 66
 602:	61 f0       	breq	.+24     	; 0x61c <DIO_set_port_direction+0x1c>
 604:	83 34       	cpi	r24, 0x43	; 67
 606:	18 f4       	brcc	.+6      	; 0x60e <DIO_set_port_direction+0xe>
 608:	81 34       	cpi	r24, 0x41	; 65
 60a:	69 f4       	brne	.+26     	; 0x626 <DIO_set_port_direction+0x26>
 60c:	05 c0       	rjmp	.+10     	; 0x618 <DIO_set_port_direction+0x18>
 60e:	83 34       	cpi	r24, 0x43	; 67
 610:	39 f0       	breq	.+14     	; 0x620 <DIO_set_port_direction+0x20>
 612:	84 34       	cpi	r24, 0x44	; 68
 614:	41 f4       	brne	.+16     	; 0x626 <DIO_set_port_direction+0x26>
 616:	06 c0       	rjmp	.+12     	; 0x624 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction;
 618:	6a bb       	out	0x1a, r22	; 26
		break ;
 61a:	08 95       	ret
		case 'B':
		DDRB=direction; 
 61c:	67 bb       	out	0x17, r22	; 23
		break ;
 61e:	08 95       	ret
		case 'C' :
		DDRC=direction; 
 620:	64 bb       	out	0x14, r22	; 20
		break ;
 622:	08 95       	ret
		case 'D':
		DDRD=direction; 
 624:	61 bb       	out	0x11, r22	; 17
 626:	08 95       	ret

00000628 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 628:	82 34       	cpi	r24, 0x42	; 66
 62a:	61 f0       	breq	.+24     	; 0x644 <DIO_write_port+0x1c>
 62c:	83 34       	cpi	r24, 0x43	; 67
 62e:	18 f4       	brcc	.+6      	; 0x636 <DIO_write_port+0xe>
 630:	81 34       	cpi	r24, 0x41	; 65
 632:	69 f4       	brne	.+26     	; 0x64e <DIO_write_port+0x26>
 634:	05 c0       	rjmp	.+10     	; 0x640 <DIO_write_port+0x18>
 636:	83 34       	cpi	r24, 0x43	; 67
 638:	39 f0       	breq	.+14     	; 0x648 <DIO_write_port+0x20>
 63a:	84 34       	cpi	r24, 0x44	; 68
 63c:	41 f4       	brne	.+16     	; 0x64e <DIO_write_port+0x26>
 63e:	06 c0       	rjmp	.+12     	; 0x64c <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; 
 640:	6b bb       	out	0x1b, r22	; 27
		break ;
 642:	08 95       	ret
		case 'B':
		PORTB=portvalue; 
 644:	68 bb       	out	0x18, r22	; 24
		break ;
 646:	08 95       	ret
		case 'C' :
		PORTC=portvalue; 
 648:	65 bb       	out	0x15, r22	; 21
		break ;
 64a:	08 95       	ret
		case 'D':
		PORTD=portvalue; 
 64c:	62 bb       	out	0x12, r22	; 18
 64e:	08 95       	ret

00000650 <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 650:	82 34       	cpi	r24, 0x42	; 66
 652:	61 f0       	breq	.+24     	; 0x66c <DIO_read_port+0x1c>
 654:	83 34       	cpi	r24, 0x43	; 67
 656:	18 f4       	brcc	.+6      	; 0x65e <DIO_read_port+0xe>
 658:	81 34       	cpi	r24, 0x41	; 65
 65a:	71 f4       	brne	.+28     	; 0x678 <DIO_read_port+0x28>
 65c:	05 c0       	rjmp	.+10     	; 0x668 <DIO_read_port+0x18>
 65e:	83 34       	cpi	r24, 0x43	; 67
 660:	39 f0       	breq	.+14     	; 0x670 <DIO_read_port+0x20>
 662:	84 34       	cpi	r24, 0x44	; 68
 664:	49 f4       	brne	.+18     	; 0x678 <DIO_read_port+0x28>
 666:	06 c0       	rjmp	.+12     	; 0x674 <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; 
 668:	89 b3       	in	r24, 0x19	; 25
		break ;
 66a:	08 95       	ret
		case 'B':
		return_val=PINB; 
 66c:	86 b3       	in	r24, 0x16	; 22
		break ;
 66e:	08 95       	ret
		case 'C' :
		return_val=PINC; 
 670:	83 b3       	in	r24, 0x13	; 19
		break ;
 672:	08 95       	ret
		case 'D':
		return_val=PIND; 
 674:	80 b3       	in	r24, 0x10	; 16
		break ;
 676:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 678:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
 67a:	08 95       	ret

0000067c <DIO_toggle_port>:

void DIO_toggle_port(unsigned char portname)
{
	switch(portname)
 67c:	82 34       	cpi	r24, 0x42	; 66
 67e:	71 f0       	breq	.+28     	; 0x69c <DIO_toggle_port+0x20>
 680:	83 34       	cpi	r24, 0x43	; 67
 682:	18 f4       	brcc	.+6      	; 0x68a <DIO_toggle_port+0xe>
 684:	81 34       	cpi	r24, 0x41	; 65
 686:	a9 f4       	brne	.+42     	; 0x6b2 <DIO_toggle_port+0x36>
 688:	05 c0       	rjmp	.+10     	; 0x694 <DIO_toggle_port+0x18>
 68a:	83 34       	cpi	r24, 0x43	; 67
 68c:	59 f0       	breq	.+22     	; 0x6a4 <DIO_toggle_port+0x28>
 68e:	84 34       	cpi	r24, 0x44	; 68
 690:	81 f4       	brne	.+32     	; 0x6b2 <DIO_toggle_port+0x36>
 692:	0c c0       	rjmp	.+24     	; 0x6ac <DIO_toggle_port+0x30>
	{
		case 'A' :
		PORTA=~PORTA;
 694:	8b b3       	in	r24, 0x1b	; 27
 696:	80 95       	com	r24
 698:	8b bb       	out	0x1b, r24	; 27
		break ;
 69a:	08 95       	ret
		case 'B':
		PORTB=~PORTB;
 69c:	88 b3       	in	r24, 0x18	; 24
 69e:	80 95       	com	r24
 6a0:	88 bb       	out	0x18, r24	; 24
		break ;
 6a2:	08 95       	ret
		case 'C' :
		PORTC=~PORTC;
 6a4:	85 b3       	in	r24, 0x15	; 21
 6a6:	80 95       	com	r24
 6a8:	85 bb       	out	0x15, r24	; 21
		break ;
 6aa:	08 95       	ret
		case 'D':
		PORTD=~PORTD;
 6ac:	82 b3       	in	r24, 0x12	; 18
 6ae:	80 95       	com	r24
 6b0:	82 bb       	out	0x12, r24	; 18
 6b2:	08 95       	ret

000006b4 <_exit>:
 6b4:	f8 94       	cli

000006b6 <__stop_program>:
 6b6:	ff cf       	rjmp	.-2      	; 0x6b6 <__stop_program>
